$date
2024-10-07T11:29+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module Multiply $end
 $var wire 3 ! shift $end
 $var wire 1 " resultOverflow $end
 $var wire 7 # shiftedCalcValue $end
 $var wire 7 $ product_partialProducts_3 $end
 $var wire 6 % product_partialProducts_2 $end
 $var wire 8 & a_data $end
 $var wire 5 ' product_partialProducts_1 $end
 $var wire 4 ( product_partialProducts_0 $end
 $var wire 4 ) resultFraction $end
 $var wire 1 * is0 $end
 $var wire 5 + tempExponent $end
 $var wire 1 , isResultNaN $end
 $var wire 2 - roundingMode $end
 $var wire 6 . exponent_1 $end
 $var wire 1 / isNaN $end
 $var wire 1 0 resultSign $end
 $var wire 4 1 firstOperandFraction $end
 $var wire 4 2 product_partialProducts_compare_3 $end
 $var wire 4 3 product_partialProducts_compare_2 $end
 $var wire 4 4 product_partialProducts_compare_1 $end
 $var wire 4 5 secondOperandFraction $end
 $var wire 5 6 roundedFraction $end
 $var wire 7 7 tempFraction $end
 $var wire 1 8 enable $end
 $var wire 1 9 addOne $end
 $var wire 1 : reset $end
 $var wire 5 ; resultExponent $end
 $var wire 8 < product $end
 $var wire 4 = fraction $end
 $var wire 1 > NaNFractionValue $end
 $var wire 1 ? sign $end
 $var wire 6 @ exponentShiftLeft $end
 $var wire 1 A overflow $end
 $var wire 5 B exponent $end
 $var wire 1 C clock $end
 $var wire 6 D exponentShiftRight $end
 $var wire 8 E b_data $end
 $var wire 7 F product_partialSums_0 $end
 $var wire 4 G product_partialProducts_compare $end
 $var wire 1 H isResult0 $end
 $var wire 1 I isInfty $end
$upscope $end
$enddefinitions $end
$dumpvars
00
b00000000 &
08
09
b000000 .
0:
b0000000 F
0>
b0000 G
0?
0A
0C
b00000000 <
b00000 '
b00 -
0H
b00000 +
0I
b0000000 7
b000000 %
b00000 6
b00000 ;
b0000000 #
b00000000 E
b0000000 $
b0000 (
b0000 )
b0000 4
b0000 5
b00000 B
b0000 2
0"
b0000 3
b0000 1
b0000 =
b000 !
0*
b000000 @
0,
0/
b000000 D
$end
#0
b110011 @
b110 !
b001100 D
1H
1:
b110100 .
#1
1C
#6
b000110 @
0C
b111001 D
b01001011 E
b0011110 F
b1111 G
0H
b000 !
b1101110 #
b1010000 $
b00101010 &
b10100 '
b1010 (
b1110 )
b00111 +
b000111 .
b1010 1
b1111 2
b1111 4
b1011 5
b01110 6
b1101110 7
19
0:
b00111 ;
b01101110 <
#11
1C
#16
0C
#21
1C
#26
b00111 B
0C
18
b1110 =
#31
1C
#36
0C
#41
1C
#46
10
0C
b10101010 &
1?
#51
1C
#56
0C
#61
1C
#66
0C
b00000000 E
b00000000 &
08
