$date
2024-10-01T15:58+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module Multiply $end
 $var wire 7 ! shift $end
 $var wire 1 " resultOverflow $end
 $var wire 7 # shiftedCalcValue $end
 $var wire 7 $ product_partialProducts_3 $end
 $var wire 6 % product_partialProducts_2 $end
 $var wire 8 & a_data $end
 $var wire 5 ' product_partialProducts_1 $end
 $var wire 4 ( product_partialProducts_0 $end
 $var wire 4 ) resultFraction $end
 $var wire 1 * is0 $end
 $var wire 5 + tempExponent $end
 $var wire 1 , isResultNaN $end
 $var wire 2 - roundingMode $end
 $var wire 6 . exponent_1 $end
 $var wire 1 / isNaN $end
 $var wire 1 0 resultSign $end
 $var wire 4 1 firstOperandFraction $end
 $var wire 4 2 product_partialProducts_compare_3 $end
 $var wire 4 3 product_partialProducts_compare_2 $end
 $var wire 4 4 product_partialProducts_compare_1 $end
 $var wire 4 5 secondOperandFraction $end
 $var wire 5 6 roundedFraction $end
 $var wire 7 7 tempFraction $end
 $var wire 1 8 enable $end
 $var wire 1 9 addOne $end
 $var wire 1 : reset $end
 $var wire 5 ; resultExponent $end
 $var wire 8 < product $end
 $var wire 4 = fraction $end
 $var wire 1 > sign $end
 $var wire 6 ? exponentShiftLeft $end
 $var wire 1 @ overflow $end
 $var wire 5 A exponent $end
 $var wire 1 B clock $end
 $var wire 6 C exponentShiftRight $end
 $var wire 8 D b_data $end
 $var wire 7 E product_partialSums_0 $end
 $var wire 4 F product_partialProducts_compare $end
 $var wire 1 G isResult0 $end
 $var wire 1 H isInfty $end
$upscope $end
$enddefinitions $end
$dumpvars
00
b00000000 &
08
09
b000000 .
0:
b0000000 E
b0000 F
0>
0@
0B
b00000000 <
b00000 '
b00 -
0G
0H
b00000 +
b0000000 7
b000000 %
b00000 6
b00000 ;
b0000000 #
b0000000 $
b00000000 D
b0000 (
b0000 )
b00000 A
b0000 4
b0000 5
b0000 2
0"
b0000 3
b0000 1
b0000000 !
b000000 ?
b0000 =
0*
0,
b000000 C
0/
$end
#0
b0000110 !
b001100 C
1G
1:
b110100 .
b110011 ?
#1
1B
#6
0B
b111001 C
b01001011 D
b0011110 E
b1111 F
0G
b0000000 !
b1101110 #
b1010000 $
b00101010 &
b10100 '
b1010 (
b1110 )
b00111 +
b000111 .
b1010 1
b1111 2
b1111 4
b1011 5
b01110 6
b1101110 7
19
0:
b00111 ;
b01101110 <
b000110 ?
#11
1B
#16
0B
#21
1B
#26
b00111 A
0B
18
b1110 =
#31
1B
#36
0B
#41
1B
#46
10
0B
b10101010 &
1>
#51
1B
#56
0B
#61
1B
#66
0B
b00000000 D
b00000000 &
08
