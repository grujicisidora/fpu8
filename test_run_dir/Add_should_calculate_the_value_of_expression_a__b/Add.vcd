$date
2024-09-09T20:05+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module Add $end
 $var wire 8 ! result_smallerOperandFraction_1 $end
 $var wire 1 " result_compare $end
 $var wire 8 # result $end
 $var wire 2 $ roundingMode $end
 $var wire 8 % z $end
 $var wire 4 & result_finalFraction $end
 $var wire 4 ' result_exponent $end
 $var wire 8 ( result_originalCalculatedValue $end
 $var wire 7 ) result_tempFraction1 $end
 $var wire 7 * result_shiftedFraction $end
 $var wire 4 + result_smallerOperandFraction $end
 $var wire 7 , result_firstShift $end
 $var wire 8 - result_greaterOperandFraction_1 $end
 $var wire 1 . clock $end
 $var wire 1 / result_isResultInfty $end
 $var wire 4 0 result_z_lo $end
 $var wire 8 1 b_data $end
 $var wire 9 2 result_calculatedValue $end
 $var wire 8 3 result_greaterOperand_data $end
 $var wire 1 4 result_overflow $end
 $var wire 8 5 a_data $end
 $var wire 6 6 result_roundedFraction $end
 $var wire 5 7 result_z_hi_9 $end
 $var wire 4 8 result_z_hi_7 $end
 $var wire 4 9 result_z_hi_8 $end
 $var wire 4 : result_z_lo_5 $end
 $var wire 5 ; result_z_hi $end
 $var wire 1 < result_isResult0 $end
 $var wire 1 = result_isOnlySmallerDenormalized $end
 $var wire 4 > result_shift $end
 $var wire 5 ? result_finalExponent $end
 $var wire 4 @ result_greaterOperandFraction $end
 $var wire 8 A result_paddedCalcValue $end
 $var wire 1 B saturationMode $end
 $var wire 7 C result_tempFraction $end
 $var wire 10 D result_shiftedFraction_shifted $end
 $var wire 4 E result_z_lo_1 $end
 $var wire 4 F result_z_lo_2 $end
 $var wire 4 G result_z_lo_3 $end
 $var wire 4 H result_z_lo_4 $end
 $var wire 5 I result_z_hi_5 $end
 $var wire 4 J result_z_hi_6 $end
 $var wire 4 K result_z_hi_3 $end
 $var wire 4 L result_z_hi_4 $end
 $var wire 4 M result_z_hi_1 $end
 $var wire 5 N result_z_hi_2 $end
 $var wire 5 O result_paddedGreaterOperandFraction_hi $end
 $var wire 1 P enable $end
 $var wire 1 Q result_isResultNaN $end
 $var wire 1 R result_addOne $end
 $var wire 1 S reset $end
 $var wire 1 T result_sign $end
 $var wire 1 U result_moveDecPoint $end
 $var wire 4 V result_tempExponent $end
 $var wire 8 W result_smallerOperand_data $end
 $var wire 5 X result_z_hi_11 $end
 $var wire 5 Y result_z_hi_10 $end
 $var wire 5 Z result_z_hi_12 $end
$upscope $end
$enddefinitions $end
$dumpvars
04
0<
0=
0B
b00 $
0P
0Q
0R
0S
b000000000 2
0T
b00000 7
0U
b00000 ;
b0000 +
b00000 ?
b0000 &
b00000000 A
b0000 '
b0000 0
b00000000 W
b00000 I
b0000 :
b0000 8
b00000 O
b0000 9
b00000 N
b0000 E
b000000 6
b00000000 -
b0000 @
b0000 >
b00000 Y
b00000 X
b00000000 (
b0000 L
b0000000 C
b00000000 #
b0000 M
b00000 Z
b0000 J
b00000000 %
b0000 K
b0000 H
b0000 F
b00000000 !
b0000 G
b00000000 3
b00000000 5
b0000 V
b00000000 1
b0000000 *
b0000000 ,
b0000000 )
0"
b0000000000 D
0.
0/
$end
#0
b0111 E
b0111 F
b0111 G
b0111 H
b01111 I
b0111 J
b1111 K
b0111 L
b0111 M
b11111 N
b0111 0
1S
b1111 8
b0111 9
b01111 Y
b0111 :
b01111 Z
b01111 ;
#1
1.
#6
b1011 @
b01011101 A
b1011101 C
b0000101000 D
b01011 O
1R
0S
b1001 V
b00101010 W
b00000101 !
0"
b01001100 #
b1100 &
b1001 '
b01011101 (
b1011101 )
b0000101 *
b1010 +
b1011101 ,
b01011000 -
0.
b01001011 1
b001011101 2
b01001011 3
b00101010 5
b001100 6
b01001 7
0=
b0100 >
b01001 ?
#11
1.
#16
0.
#21
1.
#26
1P
b01001100 %
0.
#31
1.
#36
0.
#41
1.
#46
b01010011 A
b01001010 #
b1010011 C
b01001010 %
b1010 &
b01010011 (
b1010011 )
b1010011 ,
0.
b001010011 2
0R
b10101010 5
b001010 6
b10101010 W
#51
1.
#56
0.
#61
1.
#66
b1111 @
b01111101 A
b01010000 #
b1111101 C
b01010000 %
b1000 &
b01111101 (
b1111101 )
b1111101 ,
b01111000 -
0.
b01111 O
b01001111 1
b001111101 2
1R
b01001111 3
b00101010 5
b010000 6
b01010 7
b00101010 W
b01010 ?
#71
1.
#76
0.
#81
1.
#86
b1010 @
b00000000 A
b0000000 C
b1010000000 D
b1111 M
b01010 O
0R
1T
b0000 V
b10000 X
b11111 Y
b01010000 !
b10000000 #
b10000000 %
b0000 &
b0101 '
b00000000 (
b0000000 )
b1010000 *
b0000000 ,
b01010000 -
0.
b10101010 1
b000000000 2
b10101010 3
b000000 6
b10000 7
b1111 9
b11111 ;
1<
b0000 >
b00000 ?
#91
1.
#96
0.
#101
1.
#106
b01001111 A
b1001111 C
b0000001010 D
1Q
1R
b1111 V
b00000001 !
b01111111 #
b01111111 %
b1010 &
b1111 '
b01001111 (
b1001111 )
b0000001 *
b1001111 ,
0.
b11111010 1
b001001111 2
b11111010 3
14
b001010 6
b11111 7
0<
b1010 >
b01111 ?
#111
1.
#116
0P
b00000000 1
b00000000 5
0.
