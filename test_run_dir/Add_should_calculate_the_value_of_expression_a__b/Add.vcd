$date
2024-09-17T20:31+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module Add $end
 $var wire 8 ! result_smallerOperandFraction_1 $end
 $var wire 1 " result_compare $end
 $var wire 8 # result $end
 $var wire 2 $ roundingMode $end
 $var wire 8 % z $end
 $var wire 1 & result_subtraction $end
 $var wire 4 ' result_finalFraction $end
 $var wire 4 ( result_exponent $end
 $var wire 8 ) result_originalCalculatedValue $end
 $var wire 7 * result_tempFraction1 $end
 $var wire 7 + result_shiftedFraction $end
 $var wire 4 , result_smallerOperandFraction $end
 $var wire 7 - result_firstShift $end
 $var wire 8 . result_greaterOperandFraction_1 $end
 $var wire 1 / clock $end
 $var wire 1 0 result_isResultInfty $end
 $var wire 4 1 result_z_lo $end
 $var wire 8 2 b_data $end
 $var wire 9 3 result_calculatedValue $end
 $var wire 8 4 result_greaterOperand_data $end
 $var wire 1 5 result_overflow $end
 $var wire 1 6 subtract $end
 $var wire 8 7 a_data $end
 $var wire 6 8 result_roundedFraction $end
 $var wire 5 9 result_z_hi_9 $end
 $var wire 4 : result_z_hi_7 $end
 $var wire 4 ; result_z_hi_8 $end
 $var wire 4 < result_z_lo_5 $end
 $var wire 5 = result_z_hi $end
 $var wire 1 > result_isResult0 $end
 $var wire 1 ? result_isOnlySmallerDenormalized $end
 $var wire 4 @ result_shift $end
 $var wire 5 A result_finalExponent $end
 $var wire 4 B result_greaterOperandFraction $end
 $var wire 8 C result_paddedCalcValue $end
 $var wire 1 D saturationMode $end
 $var wire 7 E result_tempFraction $end
 $var wire 10 F result_shiftedFraction_shifted $end
 $var wire 4 G result_z_lo_1 $end
 $var wire 4 H result_z_lo_2 $end
 $var wire 4 I result_z_lo_3 $end
 $var wire 4 J result_z_lo_4 $end
 $var wire 5 K result_z_hi_5 $end
 $var wire 4 L result_z_hi_6 $end
 $var wire 4 M result_z_hi_3 $end
 $var wire 4 N result_z_hi_4 $end
 $var wire 4 O result_z_hi_1 $end
 $var wire 5 P result_z_hi_2 $end
 $var wire 5 Q result_paddedGreaterOperandFraction_hi $end
 $var wire 1 R enable $end
 $var wire 1 S result_isResultNaN $end
 $var wire 1 T result_addOne $end
 $var wire 1 U reset $end
 $var wire 1 V result_sign $end
 $var wire 1 W result_moveDecPoint $end
 $var wire 4 X result_tempExponent $end
 $var wire 8 Y result_smallerOperand_data $end
 $var wire 5 Z result_z_hi_11 $end
 $var wire 5 [ result_z_hi_10 $end
 $var wire 5 \ result_z_hi_12 $end
$upscope $end
$enddefinitions $end
$dumpvars
00
05
06
0>
0?
0D
b00 $
0R
b000000000 3
0S
0T
0U
0V
b00000 9
0W
b0000 ,
b00000000 C
b00000 =
b0000 (
b00000 A
b0000 '
b0000 1
b00000000 Y
b0000 <
b00000 K
b0000 :
b0000 ;
b00000 Q
b00000 P
b0000 B
b000000 8
b0000 @
b00000000 )
b0000 L
b00000 [
b00000000 #
b0000 M
b00000 Z
b0000 J
b0000000 E
b00000000 %
b00000 \
b0000 H
b0000 I
b00000000 !
b0000 G
b00000000 7
b0000 N
b0000 O
b00000000 2
b00000000 4
b0000 X
b00000000 .
b0000000 +
b0000000 *
b0000000 -
b0000000000 F
0"
0&
0/
$end
#0
b0111 G
b0111 H
b0111 I
b0111 J
b01111 K
b0111 L
b1111 M
b0111 N
b0111 O
b11111 P
b0111 1
1U
b1111 :
b0111 ;
b01111 [
b0111 <
b01111 \
b01111 =
#1
1/
#6
b0100 @
b01001 A
b1011 B
b01011101 C
b1011101 E
b0000101000 F
b01011 Q
1T
0U
b1001 X
b00101010 Y
b00000101 !
0"
b01001100 #
b1100 '
b1001 (
b01011101 )
b1011101 *
b0000101 +
b1010 ,
b1011101 -
b01011000 .
0/
b01001011 2
b001011101 3
b01001011 4
b00101010 7
b001100 8
b01001 9
0?
#11
1/
#16
0/
#21
1/
#26
1R
b01001100 %
0/
#31
1/
#36
0/
#41
1/
#46
b01001010 #
b01010011 C
b01001010 %
b1010011 E
1&
b1010 '
b01010011 )
b1010011 *
b1010011 -
0/
b001010011 3
0T
b10101010 7
b001010 8
b10101010 Y
#51
1/
#56
0/
#61
1/
#66
b01010 A
b1111 B
b01010000 #
b01111101 C
b01010000 %
b1111101 E
0&
b1000 '
b01111101 )
b1111101 *
b1111101 -
b01111000 .
0/
b01111 Q
b01001111 2
b001111101 3
b01001111 4
1T
b00101010 7
b010000 8
b01010 9
b00101010 Y
#71
1/
#76
0/
#81
1/
#86
b0000 @
b00000 A
b1010 B
b00000000 C
b0000000 E
b1010000000 F
b1111 O
b01010 Q
0T
1V
b0000 X
b10000 Z
b11111 [
b01010000 !
b10000000 #
b10000000 %
1&
b0000 '
b0101 (
b00000000 )
b0000000 *
b1010000 +
b0000000 -
b01010000 .
0/
b10101010 2
b000000000 3
b10101010 4
b000000 8
b10000 9
b1111 ;
b11111 =
1>
#91
1/
#96
0/
#101
1/
#106
b1010 @
b01111 A
b01001111 C
b1001111 E
b0000001010 F
1S
1T
b1111 X
b00000001 !
b01111111 #
b01111111 %
b1010 '
b1111 (
b01001111 )
b1001111 *
b0000001 +
b1001111 -
0/
b11111010 2
b001001111 3
b11111010 4
15
b001010 8
b11111 9
0>
#111
1/
#116
0/
#121
1/
#126
b00000000 2
0R
b00000000 7
0/
