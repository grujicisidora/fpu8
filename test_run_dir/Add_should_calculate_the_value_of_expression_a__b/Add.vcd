$date
2024-10-02T20:30+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module Add $end
 $var wire 4 ! shift $end
 $var wire 1 " resultOverflow $end
 $var wire 7 # shiftedCalcValue $end
 $var wire 1 $ subtract $end
 $var wire 8 % a_data $end
 $var wire 4 & resultFraction $end
 $var wire 1 ' compare $end
 $var wire 1 ( is0 $end
 $var wire 1 ) subtraction $end
 $var wire 4 * tempExponent $end
 $var wire 1 + isResultNaN $end
 $var wire 2 , roundingMode $end
 $var wire 4 - exponent_1 $end
 $var wire 1 . isNaN $end
 $var wire 1 / resultSign $end
 $var wire 5 0 roundedFraction $end
 $var wire 7 1 tempFraction $end
 $var wire 8 2 greaterOperand_data $end
 $var wire 8 3 paddedCalcValue $end
 $var wire 4 4 smallerOperandFraction $end
 $var wire 8 5 smallerOperand_data $end
 $var wire 10 6 shiftedFraction_shifted $end
 $var wire 1 7 enable $end
 $var wire 1 8 addOne $end
 $var wire 1 9 reset $end
 $var wire 4 : resultExponent $end
 $var wire 7 ; shift_1 $end
 $var wire 4 < fraction $end
 $var wire 7 = smallerOperandFraction_1 $end
 $var wire 1 > NaNFractionValue $end
 $var wire 1 ? sign $end
 $var wire 1 @ overflow $end
 $var wire 5 A exponent $end
 $var wire 7 B greaterOperandFraction_1 $end
 $var wire 1 C clock $end
 $var wire 4 D greaterOperandFraction $end
 $var wire 8 E b_data $end
 $var wire 1 F isOnlySmallerDenormalized $end
 $var wire 8 G originalCalculatedValue $end
 $var wire 8 H calculatedValue $end
 $var wire 1 I isResult0 $end
 $var wire 1 J isInfty $end
$upscope $end
$enddefinitions $end
$dumpvars
b0000 D
b0000000000 6
07
08
09
b0000000 B
b00000000 %
0>
0?
0@
b0000000 ;
b0000000 =
0C
b00 ,
0F
b00000000 3
0I
b00000000 2
0J
b00000000 5
b00000 0
b00000000 G
b0000 !
b0000000 1
b00000000 H
b0000000 #
b0000 -
b0000 *
b00000000 E
b0000 &
b00000 A
b0000 4
0"
0$
0'
b0000 <
0(
0)
b0000 :
0+
0.
0/
$end
#0
19
b0000110 ;
#1
1C
#6
b1011000 B
0C
b1011 D
b01001011 E
0F
b01011101 G
b01011101 H
b0100 !
b1011101 #
b00101010 %
b1100 &
0'
b1001 *
b1001 -
b01100 0
b1011101 1
b01001011 2
b01011101 3
b1010 4
b00101010 5
b0000101000 6
18
09
b1001 :
b0000000 ;
b0000101 =
#11
1C
#16
0C
#21
1C
#26
b01001 A
0C
17
b1100 <
#31
1C
#36
0C
#41
1C
#46
b1010011 #
0C
b10101010 %
b1010 &
b01010011 G
b01010011 H
1)
b01010 0
b1010011 1
b01010011 3
b10101010 5
08
b1010 <
#51
1C
#56
0C
#61
1C
#66
b01010 A
b1111000 B
b1111101 #
0C
b1111 D
b00101010 %
b01001111 E
b1000 &
b01111101 G
b01111101 H
0)
b10000 0
b1111101 1
b01001111 2
b01111101 3
b00101010 5
18
b1010 :
b1000 <
#71
1C
#76
0C
#81
1C
#86
b00000 A
b1010000 B
0C
b1010 D
b10101010 E
b00000000 G
b00000000 H
1I
b0000 !
b0000000 #
b0000 &
1(
1)
b0000 *
b0101 -
1/
b00000 0
b0000000 1
b10101010 2
b00000000 3
b1010000000 6
08
b0000 :
b0000110 ;
b0000 <
b1010000 =
1?
#91
1C
#96
0C
#101
1C
#106
b1010 !
b01111 A
b1001111 #
0C
b11111010 E
b1010 &
b01001111 G
0(
b01001111 H
0I
b1111 *
b1111 -
b01010 0
b1001111 1
b11111010 2
b01001111 3
b0000001010 6
18
b1111 :
b0000000 ;
b1010 <
b0000001 =
#111
1C
#116
0C
#121
1C
#126
0C
b00000000 %
b00000000 E
07
