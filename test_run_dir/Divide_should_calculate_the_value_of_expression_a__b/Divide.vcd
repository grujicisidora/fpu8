$date
2024-10-17T00:11+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module Divide $end
 $var wire 9 ! quotient_finalGuess_finalStep_partialSums_0 $end
 $var wire 12 " quotient_finalGuess_finalStep_partialSums_1 $end
 $var wire 4 # dividendFraction $end
 $var wire 6 $ quotient_initGuess $end
 $var wire 9 % quotient_secondGuess_finalStep_partialSums_0 $end
 $var wire 6 & quotient_finalGuess_finalStep_partialProducts_0 $end
 $var wire 12 ' quotient_secondGuess_finalStep_partialSums_1 $end
 $var wire 8 ( quotient_finalGuess_finalStep_partialProducts_2 $end
 $var wire 7 ) quotient_finalGuess_finalStep_partialProducts_1 $end
 $var wire 10 * quotient_finalGuess_finalStep_partialProducts_4 $end
 $var wire 9 + quotient_finalGuess_finalStep_partialProducts_3 $end
 $var wire 11 , quotient_finalGuess_finalStep_partialProducts_5 $end
 $var wire 1 - isResultNaN $end
 $var wire 6 . quotient_secondGuess_secondStep $end
 $var wire 2 / status_lo $end
 $var wire 2 0 roundingMode $end
 $var wire 6 1 quotient_secondGuess_finalStep_partialProducts_compare_5 $end
 $var wire 4 2 divisorFraction $end
 $var wire 6 3 quotient_secondGuess_finalStep_partialProducts_compare_2 $end
 $var wire 6 4 quotient_secondGuess_finalStep_partialProducts_compare_1 $end
 $var wire 6 5 quotient_secondGuess_finalStep_partialProducts_compare_4 $end
 $var wire 6 6 quotient_secondGuess_finalStep_partialProducts_compare_3 $end
 $var wire 12 7 quotient_finalGuess_finalStep $end
 $var wire 6 8 quotient_partialProducts_compare $end
 $var wire 6 9 quotient_partialProducts_compare_3 $end
 $var wire 6 : quotient_partialProducts_compare_2 $end
 $var wire 6 ; quotient_partialProducts_compare_1 $end
 $var wire 8 < tempFraction $end
 $var wire 2 = divisorShift $end
 $var wire 3 > status_hi $end
 $var wire 5 ? tempExponent_1 $end
 $var wire 6 @ quotient_finalGuess_secondStep $end
 $var wire 1 A addOne $end
 $var wire 5 B status $end
 $var wire 5 C resultStatus $end
 $var wire 9 D quotient_partialProducts_3 $end
 $var wire 8 E quotient_partialProducts_2 $end
 $var wire 7 F quotient_partialProducts_1 $end
 $var wire 6 G quotient_partialProducts_0 $end
 $var wire 1 H NaNFractionValue $end
 $var wire 1 I sign $end
 $var wire 4 J quotient_rom_4 $end
 $var wire 4 K quotient_rom_3 $end
 $var wire 4 L quotient_rom_6 $end
 $var wire 4 M quotient_rom_5 $end
 $var wire 4 N quotient_rom_7 $end
 $var wire 12 O quotient_secondGuess_finalStep $end
 $var wire 6 P exponentShiftLeft $end
 $var wire 4 Q quotient_rom_0 $end
 $var wire 4 R quotient_rom_2 $end
 $var wire 4 S quotient_rom_1 $end
 $var wire 7 T quotient_finalGuess_firstStepRnd $end
 $var wire 1 U clock $end
 $var wire 8 V b_data $end
 $var wire 4 W tempDividendFraction $end
 $var wire 7 X quotient_secondGuess $end
 $var wire 10 Y quotient $end
 $var wire 4 Z tempDivisorFraction $end
 $var wire 1 [ isResult0 $end
 $var wire 4 \ shift $end
 $var wire 6 ] quotient_finalGuess_finalStep_partialProducts_compare $end
 $var wire 9 ^ shiftedCalcValue $end
 $var wire 10 _ quotient_secondGuess_firstStep $end
 $var wire 8 ` a_data $end
 $var wire 6 a quotient_finalGuess_firstStep_partialProducts_compare_1 $end
 $var wire 6 b quotient_finalGuess_firstStep_partialProducts_compare_2 $end
 $var wire 6 c quotient_finalGuess_firstStep_partialProducts_compare_3 $end
 $var wire 10 d quotient_finalGuess_firstStep $end
 $var wire 6 e quotient_finalGuess_firstStep_partialProducts_compare $end
 $var wire 4 f resultFraction $end
 $var wire 6 g quotient_secondGuess_firstStep_partialProducts_compare_3 $end
 $var wire 6 h quotient_secondGuess_firstStep_partialProducts_compare_2 $end
 $var wire 6 i quotient_secondGuess_firstStep_partialProducts_compare_1 $end
 $var wire 6 j tempExponent $end
 $var wire 6 k exponent_1 $end
 $var wire 1 l resultSign $end
 $var wire 9 m quotient_secondGuess_firstStep_partialSums_0 $end
 $var wire 5 n roundedFraction $end
 $var wire 2 o dividendShift $end
 $var wire 2 p status_hi_hi $end
 $var wire 1 q enable $end
 $var wire 8 r quotient_secondGuess_firstStep_partialProducts_2 $end
 $var wire 1 s reset $end
 $var wire 7 t quotient_secondGuess_firstStep_partialProducts_1 $end
 $var wire 9 u quotient_secondGuess_firstStep_partialProducts_3 $end
 $var wire 5 v resultExponent $end
 $var wire 6 w quotient_secondGuess_firstStep_partialProducts_0 $end
 $var wire 9 x quotient_partialSums_0 $end
 $var wire 6 y quotient_secondGuess_firstStep_partialProducts_compare $end
 $var wire 4 z fraction $end
 $var wire 7 { quotient_secondGuess_firstStepRnd $end
 $var wire 1 | overflow $end
 $var wire 8 } quotient_secondGuess_finalStep_partialProducts_2 $end
 $var wire 7 ~ quotient_secondGuess_finalStep_partialProducts_1 $end
 $var wire 6 "! quotient_secondGuess_finalStep_partialProducts_0 $end
 $var wire 11 "" quotient_secondGuess_finalStep_partialProducts_5 $end
 $var wire 10 "# quotient_secondGuess_finalStep_partialProducts_4 $end
 $var wire 5 "$ exponent $end
 $var wire 9 "% quotient_secondGuess_finalStep_partialProducts_3 $end
 $var wire 8 "& quotient_finalGuess_firstStep_partialProducts_2 $end
 $var wire 7 "' quotient_finalGuess_firstStep_partialProducts_1 $end
 $var wire 6 "( quotient_finalGuess_firstStep_partialProducts_0 $end
 $var wire 9 ") quotient_finalGuess_firstStep_partialProducts_3 $end
 $var wire 6 "* exponentShiftRight $end
 $var wire 7 "+ quotient_finalGuess $end
 $var wire 9 ", quotient_finalGuess_firstStep_partialSums_0 $end
 $var wire 6 "- quotient_secondGuess_finalStep_partialProducts_compare $end
 $var wire 6 ". quotient_finalGuess_finalStep_partialProducts_compare_5 $end
 $var wire 6 "/ quotient_finalGuess_finalStep_partialProducts_compare_3 $end
 $var wire 6 "0 quotient_finalGuess_finalStep_partialProducts_compare_4 $end
 $var wire 6 "1 quotient_finalGuess_finalStep_partialProducts_compare_1 $end
 $var wire 6 "2 quotient_finalGuess_finalStep_partialProducts_compare_2 $end
$upscope $end
$enddefinitions $end
$dumpvars
b00 =
b00 0
b00 /
b000000000 !
b000000000000 7
b00000000 `
b000000000 %
0A
b00000000 }
b000000000000 "
0H
0I
b00000000 r
b000000000 +
b000000000000 '
b0000 #
0U
b00000000 E
0[
b000000000 D
b0000 2
b00000000 V
b0000000 "+
b0000000 "'
0l
0q
b00000000 "&
b000000 6
b000000 9
0s
b000000 8
b000000 ;
b000000 :
b000000 .
b000000 1
0|
b000000 3
b000000 5
b000000000 ^
b000000 4
b00000000000 ,
b000000 &
b000000000 m
b0000000000 _
b0000000000 d
b000000 $
b000000000 ")
b000000000 u
b0000000000 Y
b000000000 ",
b000000000 x
b000000000 "%
b0000000000 "#
b000000 w
b000000 y
b0000000 {
b000000 g
b000000 i
b000000 h
b000000 k
b0000000 ~
b000000 j
b0000000000 *
b000000 a
b0000000 t
b000000 c
b000000 b
b000000 e
b000000 ]
b000000 P
b00000 ?
b00000 "$
b00000 C
b000000 G
b00000 B
b000000 "-
b000000 ".
b000000 "/
b000000 "0
b000000 "1
b000000 "2
b0000000 T
b000000 @
b000000 "(
b000000 "*
b0000000 X
b000000 "!
b00000000 (
b0000 L
b0000 M
b00 p
b0000 J
b00 o
b0000 K
b0000000 F
b0000 R
b0000 S
b00000000 <
b0000 Q
b0000 N
b0000 \
b000 >
b0000 Z
b00000 n
b0000 W
b00000 v
b00000000000 ""
b000000000000 O
b0000 f
b0000000 )
b0000 z
0-
$end
#0
b01100 C
b011110 $
b111001 "*
b0110 J
b000111 j
b1000 K
b000111 k
b0010 L
1-
b0100 M
b11 o
b000110 P
b01 p
b1110 Q
b1010 R
b1100 S
1s
b1000 \
b11 =
b011 >
#1
1U
#6
b001011100000 "
b1010 #
b011000 $
b010101000 %
b001001000000 '
b01011100000 ,
0-
b011111 .
b1011 2
b111111 3
b111111 4
b111111 5
b111111 6
b001011100000 7
b111111 9
b111111 ;
b01110011 <
b00 =
b000 >
b00010 ?
b011000 "!
b100000 @
b0110000000 "#
b00000 C
b011000000 "%
b010111000 D
b0101110 "'
b0101110 F
b010111 "(
b010111000 ")
b111101 "*
b0010111 "+
b001000101 ",
b111111 "-
b111111 ".
b001011101000 O
b000010 P
b0100000 T
0U
b01001011 V
b1010 W
b0010111 X
b0011100110 Y
b1011 Z
b0001 \
b111001100 ^
b0100001000 _
b00101010 `
b111111 a
b111111 c
b0011111101 d
b111111 e
b1110 f
b111111 g
b111111 i
b000011 j
b000011 k
b001001000 m
b01110 n
b00 o
b00 p
0s
b0110000 t
b011000000 u
b00010 v
b011000 w
b000101110 x
b111111 y
b0100001 {
b01100000 }
b0110000 ~
#11
1U
#16
0U
#21
1U
#26
b001101000000 "
b1011 #
b011010 $
b000000000 %
b001101000000 '
b01101000000 ,
b100000 .
b111111 1
b1010 2
b000000 3
b000000 4
b000000 5
b000000 6
b001101000000 7
b111111 8
b01000111 <
b01011 ?
b000000 "!
b01101000000 ""
1A
b0000000000 "#
b01011 "$
b000000000 "%
b011010000 D
b0110100 "'
b0110100 F
b000000 "(
b011010 G
b011010000 ")
b110101 "*
b0011010 "+
b000110100 ",
b000000 "-
b001101000000 O
b001010 P
0U
b00101010 V
b1011 W
b0011010 X
b0100011110 Y
b1010 Z
b0000 \
b100011110 ^
b0100000100 _
b01001011 `
b0100000100 d
b000000 e
b1001 f
b001011 j
b001011 k
b000110100 m
b01001 n
1q
b0110100 t
b011010000 u
b01011 v
b000000 w
b001001110 x
b000000 y
b1001 z
b0100000 {
b00000000 }
b0000000 ~
#31
1U
#36
0U
#41
1U
#46
b001011100000 "
b1010 #
b011000 $
b010101000 %
b001001000000 '
b01011100000 ,
b011111 .
b000000 1
b1011 2
b111111 3
b111111 4
b111111 5
b111111 6
b001011100000 7
b000000 8
b01110011 <
b00010 ?
b011000 "!
b00000000000 ""
0A
b0110000000 "#
b00010 "$
b011000000 "%
b010111000 D
b0101110 "'
b0101110 F
b010111 "(
b000000 G
b010111000 ")
b111101 "*
b0010111 "+
b001000101 ",
b111111 "-
b001011101000 O
b000010 P
0U
b01001011 V
b1010 W
b0010111 X
b0011100110 Y
b1011 Z
b0001 \
b111001100 ^
b0100001000 _
b00101010 `
b0011111101 d
b111111 e
b1110 f
b000011 j
b000011 k
b001001000 m
b01110 n
b0110000 t
b011000000 u
b00010 v
b011000 w
b000101110 x
b111111 y
b1110 z
b0100001 {
b01100000 }
b0110000 ~
#51
1U
#56
b00000000 `
0q
0U
b00000000 V
